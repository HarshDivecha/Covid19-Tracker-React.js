{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/covid_image.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","StylesProvider","container","Grid","spacing","justify","item","component","Card","xs","md","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","src","covidImage","image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f198979.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1cLFE\",\"card\":\"Cards_card__25Pt7\",\"infected\":\"Cards_infected__254-H\",\"recovered\":\"Cards_recovered__2BjHg\",\"deaths\":\"Cards_deaths__1bLOx\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid, StylesProvider} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\n//functional component\r\nconst Cards= ({data: {confirmed, recovered, deaths, lastUpdate} } ) =>{\r\n    if(!confirmed){\r\n        return \"Loading...\";\r\n    }\r\n    return (\r\n        <div className={StylesProvider.container}>\r\n            {/* Grid Container is a layout format css */}\r\n            <Grid container spacing={3} justify=\"center\">\r\n                {/* on mobile devices take all 12 spaces, on medium or large 3 spaces. */}\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected) }>\r\n                    <CardContent>\r\n                        {/* gutterBottom provides a nice padding at the bottom */}\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={1 }\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n\r\n                        <Typography color=\"textSecondary\" > {new Date(lastUpdate).toDateString() } </Typography>\r\n                        <Typography variant=\"body2\"> Number of active covid-19 cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered) }>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={1 }\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n\r\n                        <Typography color=\"textSecondary\" > {new Date(lastUpdate).toDateString() } </Typography>\r\n                        <Typography variant=\"body2\"> Number of recoveries</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths) }>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={1 }\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n\r\n                        <Typography color=\"textSecondary\" > {new Date(lastUpdate).toDateString() } </Typography>\r\n                        <Typography variant=\"body2\"> Number of deaths</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url =\"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country)=> {\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try{\r\n  \r\n    const {data: {confirmed,recovered,deaths,lastUpdate} } = await axios.get(changeableUrl);\r\n    return {confirmed,recovered,deaths,lastUpdate};\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n \r\nexport const fetchDailyData = async ()=>{\r\n    try{\r\n        const {data} = await axios.get( `${url}/daily` );\r\n\r\n        const modifiedData = data.map((dailyData)=>({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() =>{\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name)\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n  //  const  response = await axios.get();\r\n    //  const response = await axios.get(url);\r\n    //  return response.data;\r\n\r\n    // const  {data} = await axios.get();\r\n\r\n    // const modifiedData = {\r\n    //     confirmed: data.confirmed,\r\n    //     recovered: data.recovered,\r\n    //     deaths: data.deaths,\r\n    //     lastUpdate: data.lastUpdate,\r\n    // }","import React, {useState,useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport{ Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n//functional component\r\n\r\nconst Chart= ({data: {confirmed,deaths,recovered}, country}) =>{\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchApi = async ()=>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchApi();\r\n    },[]);\r\n\r\n    // in line component 1st {} is to make is dynamic and 2nd for making it an object\r\n    const lineChart = (\r\n        dailyData.length\r\n        ?(<Line\r\n            data={{\r\n                labels: dailyData.map( ({date})=>date ),\r\n                datasets: [{\r\n                    data: dailyData.map( ({confirmed})=>confirmed ),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill:true,\r\n                }, {\r\n                    data: dailyData.map( ({deaths})=>deaths ),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255,0,0, 0.5',\r\n                    fill:true,\r\n                }]\r\n            }}\r\n         />)\r\n        :null\r\n    );\r\n\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ?(\r\n            <Bar\r\n                data={{\r\n                     labels: ['Infected', 'Recovered', 'Deaths'],\r\n                     datasets: [{\r\n                         label: 'People',\r\n                         backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\r\n                         data:[confirmed.value, recovered.value, deaths.value]\r\n                     }]\r\n                }}\r\n                options={{\r\n                    legend: {display:false},\r\n                    title:{display:true, text: `Current state in ${country}`}\r\n                }}\r\n            />\r\n        )\r\n        :null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country? barChart: lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n\r\n\r\n// const [dailyData, setDailyData] = useState({});\r\n// learn useState for this.\r\n// it just replaces\r\n// state={\r\n//     dailydata:{}\r\n// }\r\n// with a method to set state called setDailystate, in one line","import React, {useState,useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css'\r\n\r\nimport {fetchCountries} from '../../api';\r\n\r\n//functional component\r\nconst CountryPicker= ({handleCountryChange}) =>{\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect( ()=>{\r\n        const fetchAPI = async() =>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    console.log(fetchedCountries);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value) }>\r\n                <option value=\"America\"> America </option>\r\n                {fetchedCountries.map((country,i)=> <option key={i} value={country}>{country}</option> )}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/covid_image.9e5d4fc7.png\";","import React from 'react';\r\n\r\nimport { Cards,Chart,CountryPicker } from './components';\r\nimport styles from './App.module.css'\r\nimport {fetchData} from './api'\r\nimport covidImage from './images/covid_image.png'\r\n\r\nclass App extends React.Component{\r\n\r\n    state={\r\n        data: {},\r\n        country:'',\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        this.setState({data: fetchedData})\r\n    }\r\n\r\n    handleCountryChange = async(country) =>{\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data: fetchedData, country:country})\r\n        //1 fetch data\r\n        //2 set state\r\n    }\r\n\r\n    render(){\r\n        const {data,country} = this.state;\r\n        return(\r\n            <div className={styles.container}>\r\n\r\n                <img src={covidImage} className={styles.image}/>\r\n\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange = {this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\n// Rednering APP component in root id which is in indexedDB.js at public folder\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2Ytfn\",\"image\":\"App_image__c50eD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1H_2f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2aFPP\"};"],"sourceRoot":""}